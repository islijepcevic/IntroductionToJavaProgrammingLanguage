package hr.fer.zemris.java.tecaj_5;

import java.util.*;

public class ProgramSaStablima {

	/**
	 * @param args
	 */
	public static void main(String[] args) {

            Comparator<Zaposlenik> komparator= new KompozitniKomparator()
            	.dodaj( new KomparatorPoPlaci() )
            	.dodaj( Collections.reverseOrder(new KomparatorPoPrezimenu()) );


            // PRVO PROBANO
            //KomparatorPoPlaci komparator = new KomparatorPoPlaci();
            
            // DRUGO PROBANO
            // Gollections.reverseOrder( komparator )

            Set<Zaposlenik> zaposlenici = new TreeSet<Zaposlenik>( komparator );

//            Set<Zaposlenik> zaposlenici = new TreeSet<Zaposlenik> (
//            		new KompozitniKomparator()
//                		.dodaj( new KomparatorPoPlaci() )
//                		.dodaj( Collections.reverseOrder(new KomparatorPoPrezimenu())
//                	)
//            );
            
            /*
             * ovo je primjer anonimnog razreda, automatski nasljedjuje Zaposlenika (u ovom slucaju)
             * nema ime, pa ni konstruktor
             * sluzi za prosirivanje nekog razreda dodatnim metodama
             */
            Zaposlenik peric = new Zaposlenik("1", "Peric", "Pero", 10000) {
                public String toString() {
                    return "Prosireni zaposlenik: " + super.toString();
                }
            };
            
            zaposlenici.add( peric );
            zaposlenici.add( new Zaposlenik("2", "Agic", "Agata", 15000) );
            zaposlenici.add( new Zaposlenik("3", "Ivic", "Ivana", 12500) );
            zaposlenici.add( new Zaposlenik("4", "Vedric", "Vedrana", 15000) );
            
            System.out.println("SET (tree):" + " " + zaposlenici.size());
            for (Zaposlenik zap : zaposlenici) {
                    System.out.println( zap );
            }
            
            
	}

        /**
         * NE OVO RADITI INACE
         * POSTOJI Collections.reverseOrder( komparator )
         */
        private static class ReverzniKomparator implements Comparator<Zaposlenik> {
            private Comparator<Zaposlenik> originalni;

            public ReverzniKomparator(Comparator<Zaposlenik> originalni) {
                super();
                this.originalni = originalni;
            }

            @Override
            public int compare( Zaposlenik o1, Zaposlenik o2 ) {
                return -originalni.compare( o1, o2 );
            }

            
        }

        private static class KomparatorPoPlaci implements Comparator<Zaposlenik> {
            @Override
            public int compare( Zaposlenik o1, Zaposlenik o2 ) {
                double razlika = o1.getPlaca() - o2.getPlaca();

                if (Math.abs(razlika) < 0.01) {
                    return 0;
                } else if (razlika < 0) {
                    return -1;
                } else {
                    return 1;
                }
            }
        }

        private static class KomparatorPoPrezimenu implements Comparator<Zaposlenik> {
            @Override
            public int compare( Zaposlenik o1, Zaposlenik o2 ) {
                return o2.getPrezime().compareTo( o2.getPrezime() );
            }
        }
        
        private static class KomparatorPoImenu implements Comparator<Zaposlenik> {
            @Override
            public int compare( Zaposlenik o1, Zaposlenik o2 ) {
                return o1.getIme().compareTo( o2.getIme() );
            }
        }
        
        private static class KomparatorPoSifri implements Comparator<Zaposlenik> {
        	/**
        	 * OVO JE U REDU SAMO AKO JE UGOVOROM DOGOVORENO DA JE PRIRODNI POREDAK PO SIFRI
        	 */
            @Override
            public int compare( Zaposlenik o1, Zaposlenik o2 ) {
            	return o1.compareTo(o2);
            }
        }

        /**
         * KOMPOZITNI KOMPARATOR
         */
        private static class KompozitniKomparator implements Comparator<Zaposlenik> {
            // ALTERNATIVA PISANJU DEFAULTNOG KONSTRUKTORA
            private List<Comparator<Zaposlenik>> komparatori = new ArrayList<Comparator<Zaposlenik>>();

            public KompozitniKomparator dodaj(Comparator<Zaposlenik> komparator) {
                komparatori.add( komparator );
                return this;
            }

            @Override
            public int compare(Zaposlenik o1, Zaposlenik o2) {
                    
                for (Comparator<Zaposlenik> komparator: komparatori) {
                    int rezultat = komparator.compare(o1, o2);
                    if (rezultat != 0) {
                        return rezultat;
                    }
                }
                    return 0;
            }

        }
}
